# Generated by Django 5.1.2 on 2024-10-24 13:51

import logging

from django.db import IntegrityError, migrations

from django.utils.text import slugify
from zgw_consumers.constants import APITypes, AuthTypes

logger = logging.getLogger(__name__)


def migrate_credentials_to_service(apps, _) -> None:
    APICredential = apps.get_model("vng_api_common", "APICredential")
    Service = apps.get_model("zgw_consumers", "Service")

    credentials = APICredential.objects.all()

    for credential in credentials:
        logger.info(f"Creating Service for {credential.client_id}")

        service_slug = slugify(credential.label)

        try:
            _, created = Service.objects.get_or_create(
                api_root=credential.api_root,
                defaults=dict(
                    label=credential.label,
                    slug=service_slug,
                    api_type=APITypes.orc,
                    auth_type=AuthTypes.zgw,
                    client_id=credential.client_id,
                    secret=credential.secret,
                    user_id=credential.user_id,
                    user_representation=credential.user_representation,
                ),
            )
        except IntegrityError:
            logger.warning(
                f"Unable to create Service for {credential.api_root}. Check the"
                "`service slug` field on the existing Service's to verify an existing"
                " Service already exists."
            )
            continue

        if created:
            logger.info(f"Created new Service for {credential.api_root}")
        else:
            logger.info(f"Existing service found for {credential.api_root}")


def migrate_service_to_credentials(apps, _) -> None:
    APICredential = apps.get_model("vng_api_common", "APICredential")
    Service = apps.get_model("zgw_consumers", "Service")

    services = Service.objects.filter(auth_type=AuthTypes.zgw)

    for service in services:
        logger.info(f"Creating APICredentials for {service.client_id}")

        _, created = APICredential.objects.get_or_create(
            api_root=service.api_root,
            defaults=dict(
                label=f"Migrated credentials for {service.client_id}",
                client_id=service.client_id,
                secret=service.secret,
                user_id=service.user_id,
                user_representation=service.user_representation,
            ),
        )
        if created:
            logger.info(f"Created new APICredentials for {service.api_root}")
        else:
            logger.info(f"Existing APICredentials found for {service.api_root}")


class Migration(migrations.Migration):

    dependencies = [
        ("vng_api_common", "0005_auto_20190614_1346"),
    ]

    operations = [
        migrations.RunPython(
            migrate_credentials_to_service, reverse_code=migrate_service_to_credentials
        ),
        migrations.DeleteModel(
            name="APICredential",
        ),
    ]
