# Generated by Django 5.1.2 on 2024-10-24 13:51

import logging
from typing import Set

from django.db import migrations, models
from django.utils.text import slugify

from zgw_consumers.constants import APITypes, AuthTypes

logger = logging.getLogger(__name__)


def _get_api_type(api_root: str) -> APITypes:
    mapping = {
        "/autorisaties/api/": APITypes.ac,
        "/zaken/api/": APITypes.zrc,
        "/catalogi/api/": APITypes.ztc,
        "/documenten/api/": APITypes.drc,
        "/besluiten/api/": APITypes.drc,
    }

    for path, _type in mapping.items():
        if path in api_root.lower():
            return _type

    return APITypes.orc


def _get_service_slug(credential: models.Model, existing_slugs: Set[str]) -> str:
    default_slug: str = slugify(credential.label)

    if default_slug not in existing_slugs or not existing_slugs:
        return default_slug

    count = 2
    slug = f"{default_slug}-{count}"

    while slug in existing_slugs:
        count += 1
        slug = f"{default_slug}-{count}"

    return slug


def migrate_credentials_to_service(apps, _) -> None:
    APICredential = apps.get_model("vng_api_common", "APICredential")
    Service = apps.get_model("zgw_consumers", "Service")

    credentials = APICredential.objects.all()

    existings_service_slugs = set(Service.objects.values_list("slug", flat=True))

    for credential in credentials:
        logger.info(f"Creating Service for {credential.client_id}")

        service_slug = _get_service_slug(credential, existings_service_slugs)

        _, created = Service.objects.get_or_create(
            api_root=credential.api_root,
            defaults=dict(
                label=credential.label,
                slug=service_slug,
                api_type=_get_api_type(credential.api_root),
                auth_type=AuthTypes.zgw,
                client_id=credential.client_id,
                secret=credential.secret,
                user_id=credential.user_id,
                user_representation=credential.user_representation,
            ),
        )

        existings_service_slugs.add(service_slug)

        if created:
            logger.info(f"Created new Service for {credential.api_root}")
        else:
            logger.info(f"Existing service found for {credential.api_root}")


def migrate_service_to_credentials(apps, _) -> None:
    APICredential = apps.get_model("vng_api_common", "APICredential")
    Service = apps.get_model("zgw_consumers", "Service")

    services = Service.objects.filter(auth_type=AuthTypes.zgw)

    for service in services:
        logger.info(f"Creating APICredentials for {service.client_id}")

        _, created = APICredential.objects.get_or_create(
            api_root=service.api_root,
            defaults=dict(
                label=f"Migrated credentials for {service.client_id}",
                client_id=service.client_id,
                secret=service.secret,
                user_id=service.user_id,
                user_representation=service.user_representation,
            ),
        )
        if created:
            logger.info(f"Created new APICredentials for {service.api_root}")
        else:
            logger.info(f"Existing APICredentials found for {service.api_root}")


class Migration(migrations.Migration):

    dependencies = [
        ("vng_api_common", "0005_auto_20190614_1346"),
        ("zgw_consumers", "0022_set_default_service_slug"),
    ]

    operations = [
        migrations.RunPython(
            migrate_credentials_to_service, reverse_code=migrate_service_to_credentials
        ),
        migrations.DeleteModel(
            name="APICredential",
        ),
    ]
